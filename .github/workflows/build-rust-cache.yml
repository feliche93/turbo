name: Build Rust cache

on:
  push:
    branches: [main]
  # TODO: remove this after testing
  pull_request:
    branches: [main]

jobs:
  build_cache:
    strategy:
      fail-fast: false
      matrix:
        os:
          - name: ubuntu
            # myb use 16 core, idk
            runner: ubuntu-latest-16-core-oss
            nextest: linux
          - name: macos
            runner: macos-latest
            nextest: mac
          - name: windows
            runner: windows-latest
            nextest: windows-tar

    runs-on: ${{ matrix.os.runner }}
    name: Building Rust cache for ${{ matrix.os.name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          components: clippy
          shared-cache-key: dependencies
          save-cache: true

      # TODO: remove this after testing
      - name: Test Cache Size
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: dependencies

      - name: Install cargo-chef
        uses: baptiste0928/cargo-install@v1
        with:
          crate: cargo-chef

      - name: Install cargo-sweep
        uses: baptiste0928/cargo-install@v1
        with:
          crate: cargo-sweep

      - name: Install nextest
        uses: taiki-e/install-action@nextest

      - name: Compile dependencies
        # We exclude turbo as it requires linking Go and all logic resides in turborepo-lib
        run: |
          cargo sweep -s
          cargo chef prepare
          cargo chef cook --workspace --all-targets
          cargo chef cook --workspace --all-targets --release
          cargo chef cook --workspace --all-targets --check
          cargo chef cook --workspace --all-targets --check --release
          cargo chef cook --workspace --all-targets --clippy
          cargo nextest run --no-run --release --exclude turbo
          cargo sweep -f

#  # TODO: remove this after testing
#  cleanup:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v3
#
#      - name: Cleanup
#        env:
#          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          gh extension install actions/gh-actions-cache
#
#          REPO=${{ github.repository }}
#          BRANCH=${{ github.ref }}
#
#          echo "Fetching list of cache key"
#          cacheKeysForPR=$(gh actions-cache list -R $REPO -B $BRANCH | cut -f 1 )
#
#          ## Setting this to not fail the workflow while deleting cache keys.
#          set +e
#          echo "Deleting caches..."
#          for cacheKey in $cacheKeysForPR
#          do
#              gh actions-cache delete $cacheKey -R $REPO -B $BRANCH --confirm
#          done
#          echo "Done"
